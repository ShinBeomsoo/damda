name: Release

on:
  push:
    tags:
      - 'v*'

# Required for creating releases with GITHUB_TOKEN
permissions:
  contents: write

jobs:
  release:
    name: Build and publish release
    runs-on: macos-14
    concurrency:
      group: release-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      - name: Show Xcode version
        run: |
          xcodebuild -version

      - name: Derive stage/version from tag
        id: meta
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}" # e.g., v1.0.1 or v1.0.1-rc.abcdef
          VERSION_ALL="${TAG#v}"
          if [[ "$VERSION_ALL" == *-rc.* ]]; then
            STAGE=staging
            VERSION_CORE="${VERSION_ALL%%-*}"   # 1.0.1
            PRERELEASE=true
          else
            STAGE=prod
            VERSION_CORE="$VERSION_ALL"        # 1.0.1
            PRERELEASE=false
          fi
          echo "stage=$STAGE" >> "$GITHUB_OUTPUT"
          echo "version_core=$VERSION_CORE" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Build (Release, codesign disabled for CI)
        run: |
          xcodebuild \
            -project damda.xcodeproj \
            -scheme damda \
            -configuration Release \
            -destination 'platform=macOS' \
            -derivedDataPath build \
            CODE_SIGNING_ALLOWED=NO | xcpretty || true

      - name: Import Developer ID certificate (conditional)
        if: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT_P12 != '' && secrets.DEVELOPER_ID_P12_PASSWORD != '' }}
        env:
          P12_BASE64: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT_P12 }}
          P12_PASSWORD: ${{ secrets.DEVELOPER_ID_P12_PASSWORD }}
        run: |
          set -euo pipefail
          KEYCHAIN="build-signing.keychain-db"
          KEYCHAIN_PW=$(uuidgen)
          echo "$P12_BASE64" | base64 --decode > signing.p12
          security create-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN"
          security list-keychains -d user -s "$KEYCHAIN" $(security list-keychains -d user | sed 's/\"//g')
          security import signing.p12 -k "$KEYCHAIN" -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PW" "$KEYCHAIN"
          rm -f signing.p12
          echo "KEYCHAIN_NAME=$KEYCHAIN" >> $GITHUB_ENV
          echo "KEYCHAIN_PW=$KEYCHAIN_PW" >> $GITHUB_ENV

      - name: Codesign app with Developer ID (conditional)
        if: ${{ env.KEYCHAIN_NAME != '' }}
        env:
          DEVELOPER_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
        run: |
          set -euo pipefail
          APP_PATH="build/Build/Products/Release/damda.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "App not found at $APP_PATH" >&2; exit 1;
          fi
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN_NAME"
          if [ -z "${DEVELOPER_IDENTITY}" ]; then
            DEVELOPER_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_NAME" | awk -F '"' '/Developer ID Application/ {print $2; exit}')
          fi
          echo "Using signing identity: $DEVELOPER_IDENTITY"
          ENTITLEMENTS="damda/damda.entitlements"
          if [ ! -f "$ENTITLEMENTS" ]; then ENTITLEMENTS="damda/damda.entitlements"; fi
          codesign --deep --force --timestamp --options runtime \
            --entitlements "$ENTITLEMENTS" \
            -s "$DEVELOPER_IDENTITY" "$APP_PATH"
          codesign --verify --deep --strict --verbose=2 "$APP_PATH"

      - name: Package DMG
        env:
          STAGE: ${{ steps.meta.outputs.stage }}
          VERSION: ${{ steps.meta.outputs.version_core }}
        run: |
          chmod +x ./scripts/package_dmg.sh
          ./scripts/package_dmg.sh

      - name: Resolve artifact directory
        id: paths
        run: |
          OUT_DIR="dist/${{ steps.meta.outputs.stage }}/latest"
          echo "out_dir=$OUT_DIR" >> "$GITHUB_OUTPUT"
          echo "Listing $OUT_DIR:" && ls -lh "$OUT_DIR"

      - name: Notarize DMG (conditional)
        if: ${{ env.KEYCHAIN_NAME != '' && ( (secrets.ASC_KEY_ID != '' && secrets.ASC_ISSUER_ID != '' && secrets.ASC_KEY != '') || (secrets.NOTARY_APPLE_ID != '' && secrets.NOTARY_APP_PASSWORD != '' && secrets.APPLE_TEAM_ID != '') ) }}
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY: ${{ secrets.ASC_KEY }}
          NOTARY_APPLE_ID: ${{ secrets.NOTARY_APPLE_ID }}
          NOTARY_APP_PASSWORD: ${{ secrets.NOTARY_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          DMG_PATH=$(ls "${{ steps.paths.outputs.out_dir }}"/damda-*.dmg)
          echo "Submitting for notarization: $DMG_PATH"
          if [ -n "$ASC_KEY_ID" ] && [ -n "$ASC_ISSUER_ID" ] && [ -n "$ASC_KEY" ]; then
            echo "$ASC_KEY" | base64 --decode > asc_api_key.p8
            xcrun notarytool submit "$DMG_PATH" \
              --key asc_api_key.p8 --key-id "$ASC_KEY_ID" --issuer "$ASC_ISSUER_ID" \
              --wait
          else
            xcrun notarytool submit "$DMG_PATH" \
              --apple-id "$NOTARY_APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$NOTARY_APP_PASSWORD" \
              --wait
          fi
          echo "Stapling ticket to DMG"
          xcrun stapler staple "$DMG_PATH"
          xcrun stapler validate "$DMG_PATH"

      - name: Decide make_latest flag
        id: flags
        shell: bash
        run: |
          if [[ "${{ steps.meta.outputs.prerelease }}" == "true" ]]; then
            echo "make_latest=false" >> "$GITHUB_OUTPUT"
          else
            echo "make_latest=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ${{ steps.paths.outputs.out_dir }}/*.dmg
            ${{ steps.paths.outputs.out_dir }}/checksums.txt
            ${{ steps.paths.outputs.out_dir }}/manifest.json
          prerelease: ${{ steps.meta.outputs.prerelease }}
          make_latest: ${{ steps.flags.outputs.make_latest }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



